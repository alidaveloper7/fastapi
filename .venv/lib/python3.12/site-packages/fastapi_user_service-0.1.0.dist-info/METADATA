Metadata-Version: 2.4
Name: fastapi-user-service
Version: 0.1.0
Summary: Advanced FastAPI microservice scaffold with DI, Repositories, Services, JWT, Alembic, and Async SQLAlchemy.
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.115.0
Requires-Dist: uvicorn[standard]>=0.30.0
Requires-Dist: sqlalchemy>=2.0.32
Requires-Dist: asyncpg>=0.29.0
Requires-Dist: alembic>=1.13.2
Requires-Dist: pydantic>=2.8.2
Requires-Dist: pydantic-settings>=2.3.4
Requires-Dist: httpx>=0.27.2
Requires-Dist: passlib[bcrypt]>=1.7.4
Requires-Dist: PyJWT>=2.9.0
Requires-Dist: email-validator>=2.2.0
Requires-Dist: python-multipart>=0.0.12
Requires-Dist: rich>=13.7.1

# FastAPI User Service (Advanced Scaffold)

A production-style scaffold showing **FastAPI + async SQLAlchemy 2.0 + Alembic + Repositories + Services + DI + JWT Auth + Background Jobs + Http Clients**.

## Quickstart

1) Create and fill `.env` from `.env.example`:
```
cp .env.example .env
```

2) Create Postgres DB:
```
createdb fastapi_user_service
```

3) Install deps (uv, pip, or pipenv):
```
pip install -e .
```

4) Initialize DB schema (Alembic):
```
alembic upgrade head
```

5) Run:
```
uvicorn app.main:app --reload
```

Open http://127.0.0.1:8000/docs

## Notes
- Uses **Pydantic v2**, **SQLAlchemy 2.x**, **Alembic**, **httpx**, **PyJWT**, **passlib**.
- Async DB via `asyncpg`.
- Soft-delete implemented. `restore` and `force-delete` endpoints included for Users.
- Background job sends "welcome" email through a generic `EmailHttpClient` (HTTP POST).

